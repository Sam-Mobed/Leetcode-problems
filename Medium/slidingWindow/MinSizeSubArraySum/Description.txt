at first i misunderstood the question, thinking that the sum NEEDS to be equal to the target. it can be greater than the target, or equal to it.

the solution i implemented is kinda brute force, with a time complexity of O(n^2)

There is an observation that you can make when working on this problem: first off all values in the array are positive, which makes things simpler.
when you first hit an index that creates a range where the sum is greater than or equal to the target, you get its length and compare it to the 
minimum length variable. now what i did after that was to increment the left counter by one, and have right=left+1

but this isnt useful, because you are now looking at a subarray of the subarray whose sum you took. this small subarray is guaranteed to not reach the target, 
so why bother with it.

instead, increment the left pointer by one, and leave the right pointer as is.
solution:
your right pointer will be inside your main loop (for r in range(0,len(nums)))
you keep track of a total variable, which represents the sum of all elements in your subarray.
if your total becomes >= than the target, you check if the subarray has a smaller length than the smallest one you have found so far, and you
incremenet the left pointer.