solved the problem myself baby.
The runtime is O(2n) (so basically O(n)), as you traverse the list one time, and you have a pointer that is ahead of you, and wont visit the same elements 
more than once.
we have a dictionary that stores the numbers we encounter, and how many times we see them.
if the value of a key reaches two, then the pointer finds the next element that: has not been already seen twice OR is a new value, it takes that value,
writes it to the index that we are looking at, and we put 'x' at the location/index from where we took our value.

The solution:
using two pointers, left and right. the right pointer goes through the entire array.
while the value of the current index is equal to the value of the index after it, the right pointer is incremented.
he also has a count variable, but for different reasons. to substitute values, we take the minimum between count and 2 (mins(2,count))
and shift those values.
Here is where the left pointer gets incremented, pointing to the last element that is valid in our new array (and the value that we will return.)