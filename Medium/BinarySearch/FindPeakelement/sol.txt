i found the solution, but it isnt particularly elegant, or leverages the features of binary search(how would you use it anyway since the array isnt sorted)

my solution: bunch of if statements. if len(nums)==1 return 0. if the length is 2, check which element is bigger.
then you have a corner case. check if nums[0]>nums[1], if it is, then return 0. (elements on index=0 and index=-1 are considred peak if they are bigger than their single neighbor)
then have three points, l,m,r. l=0,m=1,r=2. while r<len(nums), check if m is bigger than l and r. if it is return it, otherwise increment everything.

if we exit the loop without returning anythin, just return len(nums)-1

but the algorithm is O(n) and not O(logn) like the problem asks for

solution:
modified binary search.
look at the following graph.
        .
      /
    .
  /
.

imagine if you are lookin at the middle element, and you are looking for a peak, would you continue searching the right side of the array  or the 
left side?
we don't know if the right side has a peak, but we know that the value is greater. however the left element is guaranteed to not be peak, as its
already smaller than the middle element. so we continue searchign on the right side.