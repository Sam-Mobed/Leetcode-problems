problem seems rather complicated at first.
first thing you noticed that you cant have two strings with different lengths that are similar
second you notice that if you make two counters for each string (you can just do counter1 = Counter(word1))
and the two counters match then we can return true. this means that we have the same characters with the same
the same frequences in both words, you just need to move them around to make matching strings.

the most difficult part is handling the second operation. my initial thought was to look inside both counters,
and find two keys that share the same frequency count in the other counter, and then swap the keys.

this gets pretty complicated, but i was right to think about the frequencies.

in the solution, you make counters, but you need to make a second pair of counters too. the second pair
of counters are for the frequencies of the VALUES of the first two counters.
{1:3, 2:1}
this is an example, showing that one of the words has three characters that appear once and one character that
appears twice.

however you have to make sure the characters exist within one another, something that our algorithm fails to check
'xxu' and 'aab' will return true if we only check charsCounter and frequencies counter. 
but x and u dont exist in aab, and vice versa.

so you do: return charCounter1==charCounter2 or (freqCounter1==freqCounter2 and set(word1)==set(word2))