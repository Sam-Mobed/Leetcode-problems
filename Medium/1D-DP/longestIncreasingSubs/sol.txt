there is the brute force approach, where you generate every possible subsequence, and find the one that is the longest. the time complexity is 2^n.
for each value inside the array, you decide whether you want to select it or not. so for each element inside the array, you have two options, and you have n elements: 2^n.

you can do DFS with caching, which will improve time complexity.
you can start with any of the numbers inside the list. so if you have [1,2,4,3],
you can go with either of: [1], [2], [4], [3]
if we chosoe [1], we have three possible options, whereas with [3], we dont have anything since 3 is the last element.
say we choose [1], the possibilities for the next branch are: [1,2] , [1,4] and [1,3]
you only go down a branch if the next value is greater than the last value of your subsequence.
so you are not doing brute force anymore.
If you add cache to this solution, then you can avoid repeating work.
say you're done with the first subtree, and now you want to continue with [3].
but from our other subtree, we know that there is no element that is greater than 3 and comes after it, so we can just return 1 and continue with another subtree.
same with [4], we know that there is a 3 after it inside the original list, but 3<4, so the longest subsequence after 4 is 1 as well.

but the DP solution is easeier and more efficient. you start at the last index, there are no elements that come after it,
so inside the cache you can do cache[lastelem]=1. then we get to the next element. say we have [1,2,4,3]. we start with three: cache[3]=1
then we get to 2. we have two options here, either cache[2]=1 or cache[2]=cache[3]+1 given that list[2]<list[3].

i almost had the solution. i had to work backwards instead of starting with the beginning of the list. also, to cache the longest subsequence,
you dont just do sequences[nums[i]] = sequences[nums[i-1]]+1 or sequences[nums[i]] = sequences[nums[i-1]], i had to do
 sequences[0] = max(1,1+sequences[1]...,1+sequences[n-1]). i had to check all of them, and not just the one that is right after.
 the time complexity here is O(N^2), as you start at the end, and then you move back. but when you move back, you still have to look at the cache for every
 subsequent element.
 i was on the right track.

there is also a O(nlogn) solution but he didnt cover it.

after thinking some more on it, i managed to almost get the solution, passing 23/54.
def lengthOfLIS(self, nums: List[int]) -> int:
        sequences = {key:1 for key in nums}

        for i in range(1,len(nums)):
            if nums[i]>nums[i-1]:
                sequences[nums[i]] = sequences[nums[i-1]]+1
            else:
                sequences[nums[i]] = sequences[nums[i-1]]

        return sequences[nums[-1]]


