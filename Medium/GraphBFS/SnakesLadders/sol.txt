an important thing to do is to have a function that takes in the current position on the board and turn it into the row and column number of that positon.

since we will be using BFS, we need to have a queue. this queue will contain pairs of values. each pair has the current square number as its first value,
and the second value will be the number of moves that got you to that square.

we also need to have a set that keeps track of all the squares that we have visited, that we we dont go over the same place again.

while the queue isnt empty, exctract the leftmost position and number of moves.
for i in range(1,7) #the values that we can get from a die, we calculate:
the nextSquare = square+i
the actual row and column: r,c = intToPos(nextSquare)
then we check:
is the row and column at the next square a snake or a ladder (the value is something else than -1, positions that have a snake or a ladder have the value of the next position on it instead of -1).
if we have a ladder or a snake, we set nextSquare = board[r][c]

then we check if we have reached the end of the board: nextSquare == length*length, and we return moves+1 if we havbe

thne we check if the nextSquare hasn't been visited already. if it hasnt then we append it the visited set, and to the queue (q.append([nextSquare,moves+1]))

if we exit the (while q) loop and we haven't returned a value, this means that there is no way to reach the end of the board, so we return -1.

How does this algorithm return the least number of steps to get to the end of the board?
if you follow the loop and its values, the path that gets to the end with the least number of steps progresses faster than the other paths, and it will reach the end of the
board before any other path. that's how we can simply return its number of moves without having to check the number of moves for the other paths.

Final step, how would we define the function that turns the position number into row and column:
first the solution reverses the board. the reason behind this is that we start at the last row, and make our way
to the first row. to calculate the row and column indices with the rows organized this way is more difficult.
so we swap the order of the rows.
to get the row: square-1//length
to get the column: is a bit more complicated, as its different for odd and even indexed rows
if the row is odd: c = (square-1)%length
if the row is even, we use the c we calculated to get a new column: c = length - 1 -c
